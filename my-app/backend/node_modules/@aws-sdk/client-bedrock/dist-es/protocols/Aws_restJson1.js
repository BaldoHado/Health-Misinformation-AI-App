import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, limitedParseFloat32 as __limitedParseFloat32, map, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { BedrockServiceException as __BaseException } from "../models/BedrockServiceException";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, TooManyTagsException, ValidationException, } from "../models/models_0";
export const se_CreateModelCustomizationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/model-customization-jobs");
    let body;
    body = JSON.stringify(take(input, {
        baseModelIdentifier: [],
        clientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        customModelKmsKeyId: [],
        customModelName: [],
        customModelTags: (_) => _json(_),
        customizationType: [],
        hyperParameters: (_) => _json(_),
        jobName: [],
        jobTags: (_) => _json(_),
        outputDataConfig: (_) => _json(_),
        roleArn: [],
        trainingDataConfig: (_) => _json(_),
        validationDataConfig: (_) => _json(_),
        vpcConfig: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateProvisionedModelThroughputCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/provisioned-model-throughput");
    let body;
    body = JSON.stringify(take(input, {
        clientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        commitmentDuration: [],
        modelId: [],
        modelUnits: [],
        provisionedModelName: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteCustomModelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/custom-models/{modelIdentifier}");
    b.p("modelIdentifier", () => input.modelIdentifier, "{modelIdentifier}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteModelInvocationLoggingConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/logging/modelinvocations");
    let body;
    body = "";
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteProvisionedModelThroughputCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/provisioned-model-throughput/{provisionedModelId}");
    b.p("provisionedModelId", () => input.provisionedModelId, "{provisionedModelId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_GetCustomModelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/custom-models/{modelIdentifier}");
    b.p("modelIdentifier", () => input.modelIdentifier, "{modelIdentifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetFoundationModelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/foundation-models/{modelIdentifier}");
    b.p("modelIdentifier", () => input.modelIdentifier, "{modelIdentifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetModelCustomizationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/model-customization-jobs/{jobIdentifier}");
    b.p("jobIdentifier", () => input.jobIdentifier, "{jobIdentifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetModelInvocationLoggingConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/logging/modelinvocations");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetProvisionedModelThroughputCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/provisioned-model-throughput/{provisionedModelId}");
    b.p("provisionedModelId", () => input.provisionedModelId, "{provisionedModelId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListCustomModelsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/custom-models");
    const query = map({
        [_cTB]: [
            () => input.creationTimeBefore !== void 0,
            () => (input[_cTB].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_cTA]: [
            () => input.creationTimeAfter !== void 0,
            () => (input[_cTA].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_nC]: [, input[_nC]],
        [_bMAE]: [, input[_bMAE]],
        [_fMAE]: [, input[_fMAE]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_sB]: [, input[_sB]],
        [_sO]: [, input[_sO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListFoundationModelsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/foundation-models");
    const query = map({
        [_bP]: [, input[_bP]],
        [_bCT]: [, input[_bCT]],
        [_bOM]: [, input[_bOM]],
        [_bIT]: [, input[_bIT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListModelCustomizationJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/model-customization-jobs");
    const query = map({
        [_cTA]: [
            () => input.creationTimeAfter !== void 0,
            () => (input[_cTA].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_cTB]: [
            () => input.creationTimeBefore !== void 0,
            () => (input[_cTB].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_sE]: [, input[_sE]],
        [_nC]: [, input[_nC]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_sB]: [, input[_sB]],
        [_sO]: [, input[_sO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListProvisionedModelThroughputsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/provisioned-model-throughputs");
    const query = map({
        [_cTA]: [
            () => input.creationTimeAfter !== void 0,
            () => (input[_cTA].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_cTB]: [
            () => input.creationTimeBefore !== void 0,
            () => (input[_cTB].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_sE]: [, input[_sE]],
        [_mAE]: [, input[_mAE]],
        [_nC]: [, input[_nC]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_sB]: [, input[_sB]],
        [_sO]: [, input[_sO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listTagsForResource");
    let body;
    body = JSON.stringify(take(input, {
        resourceARN: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_PutModelInvocationLoggingConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/logging/modelinvocations");
    let body;
    body = JSON.stringify(take(input, {
        loggingConfig: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StopModelCustomizationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/model-customization-jobs/{jobIdentifier}/stop");
    b.p("jobIdentifier", () => input.jobIdentifier, "{jobIdentifier}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tagResource");
    let body;
    body = JSON.stringify(take(input, {
        resourceARN: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/untagResource");
    let body;
    body = JSON.stringify(take(input, {
        resourceARN: [],
        tagKeys: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateProvisionedModelThroughputCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/provisioned-model-throughput/{provisionedModelId}");
    b.p("provisionedModelId", () => input.provisionedModelId, "{provisionedModelId}", false);
    let body;
    body = JSON.stringify(take(input, {
        desiredModelId: [],
        desiredProvisionedModelName: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const de_CreateModelCustomizationJobCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateProvisionedModelThroughputCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        provisionedModelArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteCustomModelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteModelInvocationLoggingConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteProvisionedModelThroughputCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetCustomModelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        baseModelArn: __expectString,
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customizationType: __expectString,
        hyperParameters: _json,
        jobArn: __expectString,
        jobName: __expectString,
        modelArn: __expectString,
        modelKmsKeyArn: __expectString,
        modelName: __expectString,
        outputDataConfig: _json,
        trainingDataConfig: _json,
        trainingMetrics: (_) => de_TrainingMetrics(_, context),
        validationDataConfig: _json,
        validationMetrics: (_) => de_ValidationMetrics(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetFoundationModelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        modelDetails: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetModelCustomizationJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        baseModelArn: __expectString,
        clientRequestToken: __expectString,
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customizationType: __expectString,
        endTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        failureMessage: __expectString,
        hyperParameters: _json,
        jobArn: __expectString,
        jobName: __expectString,
        lastModifiedTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        outputDataConfig: _json,
        outputModelArn: __expectString,
        outputModelKmsKeyArn: __expectString,
        outputModelName: __expectString,
        roleArn: __expectString,
        status: __expectString,
        trainingDataConfig: _json,
        trainingMetrics: (_) => de_TrainingMetrics(_, context),
        validationDataConfig: _json,
        validationMetrics: (_) => de_ValidationMetrics(_, context),
        vpcConfig: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetModelInvocationLoggingConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        loggingConfig: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetProvisionedModelThroughputCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        commitmentDuration: __expectString,
        commitmentExpirationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        desiredModelArn: __expectString,
        desiredModelUnits: __expectInt32,
        failureMessage: __expectString,
        foundationModelArn: __expectString,
        lastModifiedTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        modelArn: __expectString,
        modelUnits: __expectInt32,
        provisionedModelArn: __expectString,
        provisionedModelName: __expectString,
        status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListCustomModelsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        modelSummaries: (_) => de_CustomModelSummaryList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListFoundationModelsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        modelSummaries: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListModelCustomizationJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        modelCustomizationJobSummaries: (_) => de_ModelCustomizationJobSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListProvisionedModelThroughputsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        provisionedModelSummaries: (_) => de_ProvisionedModelSummaries(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutModelInvocationLoggingConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StopModelCustomizationJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateProvisionedModelThroughputCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.bedrock#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.bedrock#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.bedrock#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.bedrock#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.bedrock#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.bedrock#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.bedrock#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.bedrock#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        resourceName: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_CustomModelSummary = (output, context) => {
    return take(output, {
        baseModelArn: __expectString,
        baseModelName: __expectString,
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customizationType: __expectString,
        modelArn: __expectString,
        modelName: __expectString,
    });
};
const de_CustomModelSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CustomModelSummary(entry, context);
    });
    return retVal;
};
const de_ModelCustomizationJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelCustomizationJobSummary(entry, context);
    });
    return retVal;
};
const de_ModelCustomizationJobSummary = (output, context) => {
    return take(output, {
        baseModelArn: __expectString,
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customModelArn: __expectString,
        customModelName: __expectString,
        customizationType: __expectString,
        endTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        jobArn: __expectString,
        jobName: __expectString,
        lastModifiedTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        status: __expectString,
    });
};
const de_ProvisionedModelSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProvisionedModelSummary(entry, context);
    });
    return retVal;
};
const de_ProvisionedModelSummary = (output, context) => {
    return take(output, {
        commitmentDuration: __expectString,
        commitmentExpirationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        desiredModelArn: __expectString,
        desiredModelUnits: __expectInt32,
        foundationModelArn: __expectString,
        lastModifiedTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        modelArn: __expectString,
        modelUnits: __expectInt32,
        provisionedModelArn: __expectString,
        provisionedModelName: __expectString,
        status: __expectString,
    });
};
const de_TrainingMetrics = (output, context) => {
    return take(output, {
        trainingLoss: __limitedParseFloat32,
    });
};
const de_ValidationMetrics = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ValidatorMetric(entry, context);
    });
    return retVal;
};
const de_ValidatorMetric = (output, context) => {
    return take(output, {
        validationLoss: __limitedParseFloat32,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _bCT = "byCustomizationType";
const _bIT = "byInferenceType";
const _bMAE = "baseModelArnEquals";
const _bOM = "byOutputModality";
const _bP = "byProvider";
const _cTA = "creationTimeAfter";
const _cTB = "creationTimeBefore";
const _fMAE = "foundationModelArnEquals";
const _mAE = "modelArnEquals";
const _mR = "maxResults";
const _nC = "nameContains";
const _nT = "nextToken";
const _sB = "sortBy";
const _sE = "statusEquals";
const _sO = "sortOrder";
